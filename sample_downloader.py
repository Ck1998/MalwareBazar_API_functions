"""

Basic Usage of downloader

"""

from sys import argv
from requests import post
from json import dumps
from os import makedirs, path as opath, walk
from zipfile import ZipFile

API_BASE = "https://mb-api.abuse.ch/api/v1/"
BASE_STORAGE_DIR = "Downloaded_Samples/"
FILE_PASSWORD = "infected"
ENCRYPTED_ZIP_BASE = "Encrypted_Zip/"
DECRYPTED_ZIP_BASE = "Decrypted_Samples"


def get_sample_hashes_using_tag(tag_name):
    if not opath.exists(f"{BASE_STORAGE_DIR}{tag_name}"):
        makedirs(name=f"{BASE_STORAGE_DIR}{tag_name}", exist_ok=True)
    resp = post(url=API_BASE, data={"query": "get_taginfo", "tag": tag_name})

    with open(f"{BASE_STORAGE_DIR}{tag_name}/{tag_name}_samples_information.json", "w+") as wo:
        wo.write(dumps(resp.json()['data'], indent=4))

    print(f"Downloaded samples information stored in {tag_name}_samples_information.json")
    sample_hashes = [x['sha256_hash'] for x in resp.json()['data']]
    return sample_hashes


def download_samples(hash_list: list, tag_name: str):
    failed_hashes = []
    if not opath.exists(f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}"):
        makedirs(name=f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}", exist_ok=True)
    for hash in hash_list:
        try:
            resp = post(url=API_BASE, data={"query": "get_file", "sha256_hash": hash})
        except Exception as e:
            print(f"Could not download sample for hash - {hash}")
            failed_hashes.append(hash)
        else:
            if not resp.content:
                print(f"Could not download sample for hash - {hash}")
                failed_hashes.append(hash)
            else:
                with open(f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}{hash}.zip", "wb+") as wo:
                    wo.write(resp.content)

            print(f"Downloaded sample for hash - {hash}")

    if failed_hashes:
        print("Some samples could not be downloaded. Check manually.")
        print(f"Failed hashes are stored in file - {tag_name}_failed_hashes.json")
        with open(f"{tag_name}_failed_hashes.json", "w+") as wo:
            wo.write(dumps(failed_hashes, indent=4))


def decrypt_and_extract_samples(tag_name: str):
    failed_files = []
    if not opath.exists(f"{BASE_STORAGE_DIR}{tag_name}/{DECRYPTED_ZIP_BASE}"):
        makedirs(name=f"{BASE_STORAGE_DIR}{tag_name}/{DECRYPTED_ZIP_BASE}", exist_ok=True)

    for root, dirs, files in walk(f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}"):
        for filename in files[:5]:
            if "zip" in filename.split(".")[-1]:
                try:
                    with ZipFile(f"{root}/{filename}") as zf:
                        zf.extractall(path=f"{BASE_STORAGE_DIR}{tag_name}/{DECRYPTED_ZIP_BASE}",
                                      pwd=bytes(FILE_PASSWORD, encoding="utf-8"))
                except Exception as e:
                    print(e)
                    failed_files.append(filename)

    return failed_files


if __name__ == "__main__":
    tag_name = argv[1]
    # opt = argv[2:]

    # Testing args
    # tag_name = "Bazarloader"
    # opt = ["--decrypt"]

    # Getting samples hashes
    hashes = get_sample_hashes_using_tag(tag_name=tag_name)

    # Downloading samples
    download_samples(hash_list=hashes, tag_name=tag_name)

    print(f"Downloaded samples for tag - {tag_name}. Use password - 'infected' to extract samples.")

    # Decompression yet not supported due to incosistencies
    # if "--decrypt" in opt or "-d" in opt:
    #     print(f"Decrypting Samples...")
    #     failed = decrypt_and_extract_samples(tag_name=tag_name)
    #     if failed:
    #         print(f"The following samples could not be extracted - ")
    #         for f in failed:
    #             print(f)
    #     else:
    #         print(f"Decrypted and extracted all samples successfully.")
