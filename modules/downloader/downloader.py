from modules.config.config import API_BASE, BASE_STORAGE_DIR, ENCRYPTED_ZIP_BASE
from os import makedirs, path as os_path
from requests import post
from json import dumps


class Download(object):

    def __init__(self):
        pass

    @staticmethod
    def fetch_hashes(data):
        resp = post(url=API_BASE, data=data)
        return resp

    def get_sample_hashes_using_tag(self, tag_name):
        if not os_path.exists(f"{BASE_STORAGE_DIR}{tag_name}"):
            makedirs(name=f"{BASE_STORAGE_DIR}{tag_name}", exist_ok=True)
        resp = self.fetch_hashes({"query": "get_taginfo", "tag": tag_name})
        with open(f"{BASE_STORAGE_DIR}{tag_name}/{tag_name}_samples_information.json", "w+") as wo:
            wo.write(dumps(resp.json()['data'], indent=4))
        print(f"Downloaded samples information stored in {tag_name}_samples_information.json")
        sample_hashes = [x['sha256_ash'] for x in resp.json()['data']]
        return sample_hashes

    @staticmethod
    def download_samples(hash_list: list, tag_name: str):
        failed_hashes = []
        if not os_path.exists(f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}"):
            makedirs(name=f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}", exist_ok=True)
        for hash in hash_list:
            try:
                resp = post(url=API_BASE, data={"query": "get_file", "sha256_hash": hash})
            except Exception as e:
                print(f"Could not download sample for hash - {hash}")
                failed_hashes.append(hash)
            else:
                if not resp.content:
                    print(f"Could not download sample for hash - {hash}")
                    failed_hashes.append(hash)
                else:
                    with open(f"{BASE_STORAGE_DIR}{tag_name}/{ENCRYPTED_ZIP_BASE}{hash}.zip", "wb+") as wo:
                        wo.write(resp.content)

                print(f"Downloaded sample for hash - {hash}")

        if failed_hashes:
            print("Some samples could not be downloaded. Check manually.")
            print(f"Failed hashes are stored in file - {tag_name}_failed_hashes.json")
            with open(f"{tag_name}_failed_hashes.json", "w+") as wo:
                wo.write(dumps(failed_hashes, indent=4))
